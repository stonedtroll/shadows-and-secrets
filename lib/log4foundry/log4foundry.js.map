{"version":3,"file":"log4foundry.js","sources":["../src/core/LogLevel.ts","../src/core/AbstractLogger.ts","../src/loggers/console/ConsoleLogger.ts","../src/loggers/solarised/SolarisedColours.ts","../src/loggers/solarised/SolarisedLogger.ts","../src/integrations/foundry/FoundryLogger.ts","../src/factory/LoggerFactory.ts","../src/integrations/foundry/foundry-helpers.ts"],"sourcesContent":["/**\r\n * Enum defining standard logging levels.\r\n */\r\nexport enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n  FATAL = 4,\r\n  NONE = 5,\r\n}\r\n\r\n/**\r\n * Get the name of a log level.\r\n * @param level - The log level\r\n * @returns String representation of the log level\r\n */\r\nexport function getLogLevelName(level: LogLevel): string {\r\n  switch (level) {\r\n    case LogLevel.DEBUG:\r\n      return 'DEBUG';\r\n    case LogLevel.INFO:\r\n      return 'INFO';\r\n    case LogLevel.WARN:\r\n      return 'WARN';\r\n    case LogLevel.ERROR:\r\n      return 'ERROR';\r\n    case LogLevel.FATAL:\r\n      return 'FATAL';\r\n    case LogLevel.NONE:\r\n      return 'NONE';\r\n    default:\r\n      return `UNKNOWN(${level})`;\r\n  }\r\n}\r\n","import { LogLevel, getLogLevelName } from './LogLevel';\r\nimport { Logger } from './interfaces/Logger';\r\nimport { LogMessage } from './interfaces/LogMessage';\r\nimport { LoggerOptions } from './interfaces/LoggerOptions';\r\n\r\n/**\r\n * Abstract base class for loggers implementing the Logger interface.\r\n */\r\nexport abstract class AbstractLogger implements Logger {\r\n  /**\r\n   * The module identifier for this logger instance.\r\n   */\r\n  readonly moduleId: string;\r\n\r\n  /**\r\n   * The current minimum log level for this logger.\r\n   */\r\n  level: LogLevel = LogLevel.INFO;\r\n\r\n  /**\r\n   * Whether to include timestamps in log output.\r\n   */\r\n  protected readonly includeTimestamps: boolean;\r\n\r\n  /**\r\n   * Custom context to be included with all logs.\r\n   */\r\n  protected readonly context?: Record<string, unknown>;\r\n\r\n  /**\r\n   * Function to format timestamps.\r\n   */\r\n  protected readonly timestampFormatter: (timestamp: Date) => string;\r\n  /**\r\n   * Creates a new logger instance.\r\n   * @param moduleId - The module identifier for this logger\r\n   * @param options - Configuration options\r\n   */\r\n  constructor(moduleId: string, options: LoggerOptions = {}) {\r\n    this.moduleId = moduleId;\r\n    this.level = options.level ?? LogLevel.INFO;\r\n    this.includeTimestamps = options.includeTimestamps ?? true;\r\n    this.context = options.context;\r\n    \r\n    this.timestampFormatter = options.timestampFormatter ?? this.defaultTimestampFormatter;\r\n  }\r\n\r\n  /**\r\n   * Log a debug message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  debug(message: string, data?: unknown): Logger {\r\n    return this.log(LogLevel.DEBUG, message, data);\r\n  }\r\n\r\n  /**\r\n   * Log an info message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  info(message: string, data?: unknown): Logger {\r\n    return this.log(LogLevel.INFO, message, data);\r\n  }\r\n\r\n  /**\r\n   * Log a warning message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  warn(message: string, data?: unknown): Logger {\r\n    return this.log(LogLevel.WARN, message, data);\r\n  }\r\n\r\n  /**\r\n   * Log an error message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  error(message: string, data?: unknown): Logger {\r\n    return this.log(LogLevel.ERROR, message, data);\r\n  }\r\n\r\n  /**\r\n   * Log a fatal message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  fatal(message: string, data?: unknown): Logger {\r\n    return this.log(LogLevel.FATAL, message, data);\r\n  }\r\n\r\n  /**\r\n   * Log a message with a specific level.\r\n   * @param level - The log level\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  log(level: LogLevel, message: string, data?: unknown): Logger {\r\n    if (level < this.level) {\r\n      return this;\r\n    }\r\n\r\n    const logMessage: LogMessage = {\r\n      level,\r\n      message,\r\n      timestamp: new Date(),\r\n      moduleId: this.moduleId,\r\n      data,\r\n      context: this.context\r\n    };\r\n\r\n    this.processLogMessage(logMessage);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Process a log message. Must be implemented by derived classes.\r\n   * @param logMessage - The log message to process\r\n   */\r\n  protected abstract processLogMessage(logMessage: LogMessage): void;\r\n\r\n  /**\r\n   * Convert a log level to its string representation.\r\n   * @param level - The log level\r\n   * @returns String representation of the log level\r\n   */\r\n  protected getLevelName(level: LogLevel): string {\r\n    return getLogLevelName(level);\r\n  }\r\n\r\n  /**\r\n   * Default formatter for timestamps.\r\n   * @param timestamp - The timestamp to format\r\n   * @returns The formatted timestamp\r\n   */\r\n  protected defaultTimestampFormatter(timestamp: Date): string {\r\n    const hours = timestamp.getHours().toString().padStart(2, '0');\r\n    const minutes = timestamp.getMinutes().toString().padStart(2, '0');\r\n    const seconds = timestamp.getSeconds().toString().padStart(2, '0');\r\n    const milliseconds = timestamp.getMilliseconds().toString().padStart(3, '0');\r\n    \r\n    return `${hours}:${minutes}:${seconds}.${milliseconds}`;\r\n  }\r\n\r\n  /**\r\n   * Set additional context that will be included with all logs.\r\n   * @param context - Context object to include with logs\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  withContext(context: Record<string, unknown>): Logger {\r\n    this.context && Object.assign(this.context, context);\r\n    return this;\r\n  }\r\n}\r\n","import { AbstractLogger } from '../../core/AbstractLogger.js';\r\nimport { LogLevel } from '../../core/LogLevel.js';\r\nimport { LogMessage } from '../../core/interfaces/LogMessage.js';\r\nimport { ConsoleLoggerOptions } from './ConsoleLoggerOptions.js';\r\n\r\n/**\r\n * A simple console logger implementation.\r\n */\r\nexport class ConsoleLogger extends AbstractLogger {\r\n  /**\r\n   * Creates a new ConsoleLogger instance.\r\n   * @param moduleId - The module identifier for this logger\r\n   * @param options - Configuration options for the logger\r\n   */\r\n  constructor(moduleId: string, options: ConsoleLoggerOptions = {}) {\r\n    super(moduleId, options);\r\n  }\r\n\r\n  /**\r\n   * Process a log message by outputting to the console.\r\n   * @param logMessage - The log message to process\r\n   */\r\n  protected processLogMessage(logMessage: LogMessage): void {\r\n    const { level, message, timestamp, moduleId, data } = logMessage;\r\n    const formattedTimestamp = this.includeTimestamps \r\n      ? `[${this.timestampFormatter(timestamp)}] ` \r\n      : '';\r\n    const levelName = this.getLevelName(level);\r\n    \r\n    const logParts = [];\r\n    \r\n    if (formattedTimestamp) {\r\n      logParts.push(formattedTimestamp);\r\n    }\r\n    \r\n    logParts.push(`[${moduleId}]`, `[${levelName}]`, message);\r\n    const logString = logParts.join(' ');\r\n    \r\n    switch (level) {\r\n      case LogLevel.DEBUG:\r\n        console.debug(logString, data ?? '');\r\n        break;\r\n      case LogLevel.INFO:\r\n        console.info(logString, data ?? '');\r\n        break;\r\n      case LogLevel.WARN:\r\n        console.warn(logString, data ?? '');\r\n        break;\r\n      case LogLevel.ERROR:\r\n      case LogLevel.FATAL:\r\n        console.error(logString, data ?? '');\r\n        break;\r\n      default:\r\n        console.log(logString, data ?? '');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Solarised colour palette.\r\n */\r\nexport enum SolarisedColours {\r\n  BASE03 = '#002b36',  // Dark background\r\n  BASE02 = '#073642',  // Dark background (highlights)\r\n  BASE01 = '#586e75',  // Content (secondary)\r\n  BASE00 = '#657b83',  // Content\r\n  BASE0 = '#839496',   // Content (primary)\r\n  BASE1 = '#93a1a1',   // Content (emphasized)\r\n  BASE2 = '#eee8d5',   // Light background (highlights)\r\n  BASE3 = '#fdf6e3',   // Light background\r\n  YELLOW = '#b58900',  // Warnings\r\n  ORANGE = '#cb4b16',  // Errors\r\n  RED = '#dc322f',     // Fatal/Severe errors\r\n  MAGENTA = '#d33682', // Special\r\n  VIOLET = '#6c71c4',  // Info\r\n  BLUE = '#268bd2',    // Debug\r\n  CYAN = '#2aa198',    // Verbose/Trace\r\n  GREEN = '#859900',   // Success\r\n}\r\n","import { AbstractLogger } from '../../core/AbstractLogger';\r\nimport { LogLevel } from '../../core/LogLevel';\r\nimport { LogMessage } from '../../core/interfaces/LogMessage';\r\nimport { SolarisedColours } from './SolarisedColours';\r\nimport { SolarisedLoggerOptions } from './SolarisedLoggerOptions';\r\n\r\n/**\r\n * A logger implementation using the Solarised colour palette.\r\n */\r\nexport class SolarisedLogger extends AbstractLogger {\r\n  private readonly moduleIdColour: string;\r\n  private readonly useBackgroundColours: boolean;\r\n  \r\n  /**\r\n   * Creates a new SolarisedLogger instance.\r\n   * @param moduleId - The module identifier for this logger\r\n   * @param options - Configuration options for the logger\r\n   */\r\n  constructor(moduleId: string, options: SolarisedLoggerOptions = {}) {\r\n    super(moduleId, options);\r\n    this.moduleIdColour = options.moduleIdColour ?? SolarisedColours.VIOLET;\r\n    this.useBackgroundColours = options.useBackgroundColours ?? false;\r\n  }\r\n  \r\n  /**\r\n   * Process a log message by outputting to the console with Solarised colours.\r\n   * @param logMessage - The log message to process\r\n   */\r\n  protected processLogMessage(logMessage: LogMessage): void {\r\n    const { level, message, timestamp, moduleId, data } = logMessage;\r\n    const levelName = this.getLevelName(level);\r\n    \r\n    // Build the styles array and format string\r\n    const styles: string[] = [];\r\n    let formatString = '';\r\n    \r\n    if (this.includeTimestamps) {\r\n      const formattedTimestamp = this.timestampFormatter(timestamp);\r\n      formatString += '%c[' + formattedTimestamp + '] ';\r\n      styles.push(`color: ${SolarisedColours.BASE01}`);\r\n    }\r\n    \r\n    // Add module ID with custom colour\r\n    formatString += '%c[' + moduleId + '] ';\r\n    styles.push(`color: ${this.moduleIdColour}; font-weight: bold`);\r\n    \r\n    // Add level with styled colour\r\n    formatString += '%c[' + levelName + '] ';\r\n    styles.push(this.getLevelStyle(level));\r\n    \r\n    // Add message\r\n    formatString += '%c' + message;\r\n    styles.push(`color: ${SolarisedColours.BASE0}`);\r\n    \r\n    // Format the output with styles\r\n    console.groupCollapsed(formatString, ...styles);\r\n    \r\n    if (data !== undefined) {\r\n      console.dir(data);\r\n    }\r\n    \r\n    // Log context if available\r\n    if (logMessage.context && Object.keys(logMessage.context).length > 0) {\r\n      console.groupCollapsed('Context');\r\n      console.table(logMessage.context);\r\n      console.groupEnd();\r\n    }\r\n    \r\n    console.groupEnd();\r\n  }\r\n\r\n  /**\r\n   * Get the CSS style for a log level.\r\n   * @param level - The log level\r\n   * @returns CSS style string for the level\r\n   */\r\n  private getLevelStyle(level: LogLevel): string {\r\n    let colour: string;\r\n    let backgroundColour: string = 'transparent';\r\n    let fontWeight: string = 'normal';\r\n\r\n    switch (level) {\r\n      case LogLevel.DEBUG:\r\n        colour = SolarisedColours.BLUE;\r\n        break;\r\n      case LogLevel.INFO:\r\n        colour = SolarisedColours.CYAN;\r\n        break;\r\n      case LogLevel.WARN:\r\n        colour = SolarisedColours.YELLOW;\r\n        fontWeight = 'bold';\r\n        break;\r\n      case LogLevel.ERROR:\r\n        colour = SolarisedColours.ORANGE;\r\n        fontWeight = 'bold';\r\n        break;\r\n      case LogLevel.FATAL:\r\n        colour = SolarisedColours.RED;\r\n        fontWeight = 'bold';\r\n        break;\r\n      default:\r\n        colour = SolarisedColours.BASE0;\r\n    }\r\n\r\n    if (this.useBackgroundColours) {\r\n      backgroundColour = colour;\r\n      colour = SolarisedColours.BASE3; // Light text for dark background\r\n    }\r\n\r\n    return `color: ${colour}; background-color: ${backgroundColour}; font-weight: ${fontWeight}`;\r\n  }\r\n}\r\n","import { Logger } from '../../core/interfaces/Logger';\r\nimport { LogLevel } from '../../core/LogLevel';\r\nimport { LoggerFactory } from '../../factory/LoggerFactory';\r\nimport { SolarisedColours } from '../../loggers/solarised/SolarisedColours';\r\nimport { SolarisedLogger } from '../../loggers/solarised/SolarisedLogger';\r\nimport { FoundryLoggerOptions } from './FoundryLoggerOptions';\r\n\r\n/**\r\n * Foundry logger that wraps a SolarisedLogger with Foundry-specific conveniences.\r\n */\r\nexport class FoundryLogger implements Logger {\r\n  private readonly logger: SolarisedLogger;\r\n  private readonly useFoundryPrefix: boolean;\r\n  \r\n  /**\r\n   * Creates a new FoundryLogger instance.\r\n   * @param moduleId - The Foundry VTT module ID\r\n   * @param options - Configuration options for the logger\r\n   */\r\n  constructor(moduleId: string, options: FoundryLoggerOptions = {}) {\r\n    const logLevel = options.level ?? LogLevel.INFO;\r\n    \r\n    // Get the logger options, with custom defaults for Foundry modules\r\n    const loggerOptions = {\r\n      // Use the provided colour or default to YELLOW for Foundry modules\r\n      moduleIdColour: options.moduleIdColour ?? SolarisedColours.YELLOW,\r\n      useBackgroundColours: options.useBackgroundColours ?? false,\r\n      level: logLevel,\r\n      includeTimestamps: options.includeTimestamps ?? true,\r\n      context: options.context\r\n    };\r\n    \r\n    // Create a logger with the appropriate options\r\n    this.logger = LoggerFactory.getInstance().getSolarisedLogger(moduleId, loggerOptions);\r\n    \r\n    // Force set the level to ensure it matches the requested level\r\n    this.logger.level = logLevel;\r\n    \r\n    this.useFoundryPrefix = options.useFoundryPrefix ?? false;\r\n  }\r\n  \r\n  /**\r\n   * The module identifier for this logger instance.\r\n   */\r\n  get moduleId(): string {\r\n    return this.logger.moduleId;\r\n  }\r\n  \r\n  /**\r\n   * The current minimum log level for this logger.\r\n   */\r\n  get level(): LogLevel {\r\n    return this.logger.level;\r\n  }\r\n  set level(value: LogLevel) {\r\n    this.logger.level = value;\r\n  }\r\n  \r\n  /**\r\n   * Log a debug message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  debug(message: string, data?: unknown): Logger {\r\n    this.logger.debug(message, data);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Log an info message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  info(message: string, data?: unknown): Logger {\r\n    this.logger.info(message, data);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Log a warning message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  warn(message: string, data?: unknown): Logger {\r\n    this.logger.warn(message, data);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Log an error message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  error(message: string, data?: unknown): Logger {\r\n    this.logger.error(message, data);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Log a fatal message.\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  fatal(message: string, data?: unknown): Logger {\r\n    this.logger.fatal(message, data);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Log a message with a specific level.\r\n   * @param level - The log level\r\n   * @param message - Message to log\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  log(level: LogLevel, message: string, data?: unknown): Logger {\r\n    this.logger.log(level, message, data);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Format and log a message with Foundry's module prefix style.\r\n   * Common usage in Foundry modules: myModule.prefix(\"Some message\")\r\n   * \r\n   * @param message - Message to log with module prefix\r\n   * @param data - Optional additional data\r\n   * @returns The logger instance for method chaining\r\n   */\r\n  prefix(message: string, data?: unknown): Logger {\r\n    if (this.useFoundryPrefix) {\r\n      this.logger.info(`${this.moduleId} | ${message}`, data);\r\n    } else {\r\n      this.logger.info(message, data);\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Get the underlying SolarisedLogger instance.\r\n   * @returns The underlying SolarisedLogger\r\n   */\r\n  get instance(): SolarisedLogger {\r\n    return this.logger;\r\n  }\r\n}\r\n","import { LogLevel } from '../core/LogLevel';\r\nimport { Logger } from '../core/interfaces/Logger.js';\r\n\r\nimport { ConsoleLogger } from '../loggers/console/ConsoleLogger';\r\nimport { ConsoleLoggerOptions } from '../loggers/console/ConsoleLoggerOptions';\r\n\r\nimport { SolarisedLogger } from '../loggers/solarised/SolarisedLogger';\r\nimport { SolarisedLoggerOptions } from '../loggers/solarised/SolarisedLoggerOptions';\r\n\r\nimport { FoundryLogger } from '../integrations/foundry/FoundryLogger.js';\r\nimport { FoundryLoggerOptions } from '../integrations/foundry/FoundryLoggerOptions.js';\r\n\r\n/**\r\n * Factory class for creating and managing logger instances.\r\n * Implements the Singleton pattern to ensure only one factory exists in the application.\r\n */\r\nexport class LoggerFactory {\r\n  private static instance: LoggerFactory;\r\n  private readonly loggers = new Map<string, Logger>();\r\n  private defaultLevel: LogLevel = LogLevel.INFO;\r\n\r\n  /**\r\n   * Private constructor to ensure singleton pattern.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Get the singleton instance of LoggerFactory.\r\n   * @returns The LoggerFactory instance\r\n   */\r\n  public static getInstance(): LoggerFactory {\r\n    if (!LoggerFactory.instance) {\r\n      LoggerFactory.instance = new LoggerFactory();\r\n    }\r\n    return LoggerFactory.instance;\r\n  }\r\n\r\n  /**\r\n   * Create a hash key for logger caching based on options.\r\n   * @param type - Logger type name\r\n   * @param moduleId - The module identifier\r\n   * @param options - Configuration options\r\n   * @returns A unique key for the logger configuration\r\n   */\r\n  private createCacheKey(type: string, moduleId: string, options: any): string {\r\n    const parts = [type, moduleId];\r\n    \r\n    // Add key options to make the cache key unique\r\n    if (options) {\r\n      if (options.level !== undefined) {\r\n        parts.push(`level:${options.level}`);\r\n      }\r\n      \r\n      if (options.moduleIdColour) {\r\n        parts.push(`colour:${options.moduleIdColour}`);\r\n      }\r\n      \r\n      if (options.useBackgroundColours !== undefined) {\r\n        parts.push(`bgColour:${options.useBackgroundColours}`);\r\n      }\r\n    }\r\n    \r\n    return parts.join(':');\r\n  }\r\n\r\n  /**\r\n   * Get or create a ConsoleLogger instance for the specified module.\r\n   * @param moduleId - The module identifier\r\n   * @param options - Optional configuration options\r\n   * @returns A ConsoleLogger instance\r\n   */\r\n  public getConsoleLogger(moduleId: string, options: ConsoleLoggerOptions = {}): ConsoleLogger {\r\n    const loggerId = this.createCacheKey('console', moduleId, options);\r\n    let logger = this.loggers.get(loggerId) as ConsoleLogger | undefined;\r\n    \r\n    if (!logger) {\r\n      const mergedOptions = { \r\n        ...options,\r\n        level: options.level ?? this.defaultLevel \r\n      };\r\n      \r\n      logger = new ConsoleLogger(moduleId, mergedOptions);\r\n      this.loggers.set(loggerId, logger);\r\n    }\r\n    \r\n    return logger;\r\n  }\r\n\r\n  /**\r\n   * Get or create a SolarisedLogger instance for the specified module.\r\n   * @param moduleId - The module identifier\r\n   * @param options - Optional configuration options\r\n   * @returns A SolarisedLogger instance\r\n   */\r\n  public getSolarisedLogger(moduleId: string, options: SolarisedLoggerOptions = {}): SolarisedLogger {\r\n    const loggerId = this.createCacheKey('solarised', moduleId, options);\r\n    let logger = this.loggers.get(loggerId) as SolarisedLogger | undefined;\r\n    \r\n    if (!logger) {\r\n      const mergedOptions = { \r\n        ...options,\r\n        level: options.level ?? this.defaultLevel \r\n      };\r\n      \r\n      logger = new SolarisedLogger(moduleId, mergedOptions);\r\n      this.loggers.set(loggerId, logger);\r\n    }\r\n    \r\n    return logger;\r\n  }\r\n  \r\n  /**\r\n   * Get or create a FoundryLogger instance for the specified module.\r\n   * @param moduleId - The module identifier\r\n   * @param options - Optional configuration options\r\n   * @returns A FoundryLogger instance\r\n   */\r\n  public getFoundryLogger(moduleId: string, options: FoundryLoggerOptions = {}): FoundryLogger {\r\n    const loggerId = this.createCacheKey('foundry', moduleId, options);\r\n    let logger = this.loggers.get(loggerId) as FoundryLogger | undefined;\r\n    \r\n    if (!logger) {\r\n      const mergedOptions = { \r\n        ...options,\r\n        level: options.level ?? this.defaultLevel \r\n      };\r\n      \r\n      logger = new FoundryLogger(moduleId, mergedOptions);\r\n      this.loggers.set(loggerId, logger);\r\n    }\r\n    \r\n    return logger;\r\n  }\r\n  \r\n  /**\r\n   * Set the default log level for new logger instances.\r\n   * @param level - The default log level\r\n   * @returns The LoggerFactory instance for method chaining\r\n   */\r\n  public setDefaultLevel(level: LogLevel): LoggerFactory {\r\n    this.defaultLevel = level;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Set the log level for all existing logger instances.\r\n   * @param level - The log level to set\r\n   * @returns The LoggerFactory instance for method chaining\r\n   */\r\n  public setAllLogLevels(level: LogLevel): LoggerFactory {\r\n    this.loggers.forEach((logger) => {\r\n      logger.level = level;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get all registered loggers.\r\n   * @returns An array of all registered loggers\r\n   */\r\n  public getAllLoggers(): Logger[] {\r\n    return Array.from(this.loggers.values());\r\n  }\r\n\r\n  /**\r\n   * Clear all registered loggers from the cache.\r\n   * @returns The LoggerFactory instance for method chaining\r\n   */\r\n  public clearLoggers(): LoggerFactory {\r\n    this.loggers.clear();\r\n    return this;\r\n  }\r\n}\r\n","import { FoundryLogger } from './FoundryLogger';\r\nimport { FoundryLoggerOptions } from './FoundryLoggerOptions';\r\n\r\n/**\r\n * A factory function to create loggers specifically configured for Foundry VTT modules.\r\n * \r\n * @param moduleId - The Foundry VTT module ID\r\n * @param options - Configuration options for the logger\r\n * @returns A configured FoundryLogger instance\r\n */\r\nexport function createFoundryLogger(moduleId: string, options: FoundryLoggerOptions = {}): FoundryLogger {\r\n  return new FoundryLogger(moduleId, options);\r\n}\r\n"],"names":["LogLevel","SolarisedColours"],"mappings":"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"}